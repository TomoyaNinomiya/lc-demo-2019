{# Modal: Notice #}
<div class="lc-modal" id="modalNotice">
  <div class="lc-modal__bg js-lc--closeModal"></div>
  <div class="lc-modal__body">
    <p class="js-lc--modalNotice lc-align--center"></p>
    <p class="lc-modal__buttons">
      <button class="lc-button--cancel js-lc--closeModal" type="button"><i class="lc-button__icon lc-icon--close"></i><span class="lc-button__label">close</span></button>
    </p>
  </div>
</div>

<script>
$(function () {
  var $window = $(window);

  //==========================================================
  // Modal
  //==========================================================
  $('.js-lc--openModal').on('click', function() {
    var $trigger = $(this);
    $('#' + $trigger.attr('aria-controls')).addClass('is-active');
    $('#' + $trigger.attr('aria-controls')).find('.lc-modal__body').css({
      top: ($window.scrollTop() + 60) + 'px'
    });
    return false;
  });
  $('.js-lc--closeModal').on('click', function () {
    $('.lc-modal').removeClass('is-active');
  });

  // open modal of notice
  var $modalNotice = $('.lc-modal#modalNotice');
  /**
   * global function: open modal of notice
   * @param {String} notice - notice text
   * @param {Number} autoCloseTime - timeout time of modal. If is undefined the value, not close modal
   */
  window.openModalNotice = function (notice, autoCloseTime) {
    $('.lc-modal').removeClass('is-active');
    $modalNotice.find('.js-lc--modalNotice').text(notice);
    $modalNotice.find('.lc-modal__body').css({
      top: ($window.scrollTop() + 60) + 'px'
    });
    $modalNotice.addClass('is-active');
    if (autoCloseTime) {
      setTimeout(function () {
        $modalNotice.removeClass('is-active');
      }, autoCloseTime);
    }
  }

  //==========================================================
  // Tab
  //==========================================================
  if ($('.lc-tab[role="application"]').length) {
    $('.lc-tab[role="application"]').each(function () {
      var $wrapper = $(this);
      var $tab = $wrapper.find('.lc-tab__tab');
      var $tabPanel = $wrapper.find('.lc-tab__panel');
      $tab.on('click', function () {
        var $currentTab = $(this);
        $tab.removeClass('is-active');
        $tabPanel.removeClass('is-active');
        $currentTab.addClass('is-active');
        $('#' + $currentTab.attr('aria-controls')).addClass('is-active');
      });
    });
  };

  //==========================================================
  // Forms
  //==========================================================
  var $form__items = $('.lc-form__item');
  if ($form__items.length) {
    $form__items.each(function (index, form__item) {
      var $form__item = $(form__item);
      var $label = $form__item.find('.lc-form__label');
      var $input = $form__item.find('input, select, textarea');
      $label.filter(':has(.error)').addClass('is-errored');
      $input.on('focus', function () {
        $label.addClass('is-focused');
      }).on('blur', function () {
        $label.removeClass('is-focused');
      });
    });
  }

  //==========================================================
  // Favorites
  //==========================================================
  {% if is_authorized() -%}
    var favorites = [
      {%- if (app.security.token.user.favorites|length) -%}
        {%- for favorite in app.security.token.user.favorites -%}
          {{ favorite.product.id }}
        {% if not loop.last %},{% endif %}
        {%- endfor -%}
      {%- endif -%}
    ];
    $('.js-lc--favorite').each(function () {
      var $toggleFavorite = $(this);
      if (favorites.indexOf(Number($toggleFavorite.attr('data-product-id'))) > -1) {
        $toggleFavorite.addClass('is-active');
      } else {
        $toggleFavorite.removeClass('is-active');
      }
      $toggleFavorite.on('click', function () {
        var $trigger = $(this);
        if ($trigger.hasClass('is-active')) {
          $.ajax({
            type: 'GET',
            url: $trigger.attr('data-delete-href'),
          }).done(function (data, textStatus, jqXHR) {
            if (textStatus == 'success') {
              $trigger.removeClass('is-active');
              openModalNotice('Removed from Favorites.', 1500);
            }
          }).fail(function (jqXHR, textStatus, errorThrown) {
            console.log(textStatus + ': ' + errorThrown);
            openModalNotice("I'm sorry, failed add the product to favorites.", 1500);
          });
        } else {
          $.ajax({
            type: 'GET',
            url: $trigger.attr('data-add-href'),
          }).done(function (data, textStatus, jqXHR) {
            if (textStatus == 'success') {
              $trigger.addClass('is-active');
              openModalNotice('Added from Favorites.', 1500);
            }
          }).fail(function (jqXHR, textStatus, errorThrown) {
            console.log(textStatus + ': ' + errorThrown);
            openModalNotice("I'm sorry, failed remove the product from favorites.", 1500);
          });
        }
      });
    });
  {%- endif -%}{# is_authorized() #}
});


//==========================================================
// Global: format number
//==========================================================
function price_format(num, decimalPoint) {
  return number_format(Math.floor(num * Math.pow(10, decimalPoint)) / Math.pow(10, decimalPoint));
}
function number_format (num) {
  var parts = num.toString().split('.');
  parts[0] = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1,');
  return parts.join('.');
}
</script>